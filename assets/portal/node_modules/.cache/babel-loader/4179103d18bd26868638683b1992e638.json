{"ast":null,"code":"import{ApiService}from\"../../service/api.service\";var apiService=new ApiService();var SentimentActionKey={GET_SENTIMENT_PENDING:\"GET_SENTIMENT_PENDING\",GET_SENTIMENT_SUCCESS:\"GET_SENTIMENT_SUCCESS\",GET_SENTIMENT_ERROR:\"GET_SENTIMENT_ERROR\"};var SentimentAction={getSentiment:function getSentiment(sentimentURI){return function(dispatch){var uri=\"\".concat(process.env.REACT_APP_BASE_API,\"/api/sentiment?uri=\").concat(encodeURIComponent(sentimentURI));dispatch({type:SentimentActionKey.GET_SENTIMENT_PENDING});apiService.getAuth().then(function(token){return fetch(uri,{method:'GET',headers:{Authorization:\"\".concat(token.accessToken)},redirect:'follow'// manual, *follow, error\n});}).then(function(response){return response.json();}).then(function(response){return dispatch({type:SentimentActionKey.GET_SENTIMENT_SUCCESS,payload:response});}).catch(function(err){return dispatch({type:SentimentActionKey.GET_SENTIMENT_ERROR,payload:err});});};}};export{SentimentActionKey,SentimentAction};","map":{"version":3,"sources":["/Users/sshvans/Documents/work/quickstart/quickstart-onica-cci-postcall-analytics/assets/portal/src/store/actions/sentiment.action.ts"],"names":["ApiService","apiService","SentimentActionKey","GET_SENTIMENT_PENDING","GET_SENTIMENT_SUCCESS","GET_SENTIMENT_ERROR","SentimentAction","getSentiment","sentimentURI","dispatch","uri","process","env","REACT_APP_BASE_API","encodeURIComponent","type","getAuth","then","token","fetch","method","headers","Authorization","accessToken","redirect","response","json","payload","catch","err"],"mappings":"AACA,OAAQA,UAAR,KAAyB,2BAAzB,CACA,GAAMC,CAAAA,UAAU,CAAG,GAAID,CAAAA,UAAJ,EAAnB,CAEA,GAAME,CAAAA,kBAAkB,CAAG,CACvBC,qBAAqB,CAAE,uBADA,CAEvBC,qBAAqB,CAAE,uBAFA,CAGvBC,mBAAmB,CAAE,qBAHE,CAA3B,CAMA,GAAMC,CAAAA,eAAe,CAAG,CACtBC,YAAY,CAAE,sBAACC,YAAD,QAA0B,UAACC,QAAD,CAAwB,CAC9D,GAAMC,CAAAA,GAAG,WAAMC,OAAO,CAACC,GAAR,CAAYC,kBAAlB,+BAA0DC,kBAAkB,CAACN,YAAD,CAA5E,CAAT,CACAC,QAAQ,CAAC,CAACM,IAAI,CAAEb,kBAAkB,CAACC,qBAA1B,CAAD,CAAR,CACAF,UAAU,CAACe,OAAX,GACCC,IADD,CACM,SAACC,KAAD,QAAgBC,CAAAA,KAAK,CAACT,GAAD,CAAM,CAC/BU,MAAM,CAAE,KADuB,CAE/BC,OAAO,CAAE,CACLC,aAAa,WAAKJ,KAAK,CAACK,WAAX,CADR,CAFsB,CAK/BC,QAAQ,CAAE,QAAU;AALW,CAAN,CAArB,EADN,EAQCP,IARD,CAQM,SAACQ,QAAD,QAAwBA,CAAAA,QAAQ,CAACC,IAAT,EAAxB,EARN,EASCT,IATD,CASM,SAACQ,QAAD,QAAmBhB,CAAAA,QAAQ,CAAC,CAC9BM,IAAI,CAAEb,kBAAkB,CAACE,qBADK,CAE9BuB,OAAO,CAAEF,QAFqB,CAAD,CAA3B,EATN,EAaCG,KAbD,CAaO,SAACC,GAAD,QAAgBpB,CAAAA,QAAQ,CAAC,CAC5BM,IAAI,CAAEb,kBAAkB,CAACG,mBADG,CAE5BsB,OAAO,CAAEE,GAFmB,CAAD,CAAxB,EAbP,EAiBD,CApBa,EADQ,CAAxB,CAwBA,OAAQ3B,kBAAR,CAA4BI,eAA5B","sourcesContent":["import {Dispatch} from \"redux\"\nimport {ApiService} from \"../../service/api.service\"\nconst apiService = new ApiService()\n\nconst SentimentActionKey = {\n    GET_SENTIMENT_PENDING: \"GET_SENTIMENT_PENDING\",\n    GET_SENTIMENT_SUCCESS: \"GET_SENTIMENT_SUCCESS\",\n    GET_SENTIMENT_ERROR: \"GET_SENTIMENT_ERROR\"\n}\n\nconst SentimentAction = {\n  getSentiment: (sentimentURI: string) => (dispatch: Dispatch) => {\n    const uri = `${process.env.REACT_APP_BASE_API}/api/sentiment?uri=${encodeURIComponent(sentimentURI)}`\n    dispatch({type: SentimentActionKey.GET_SENTIMENT_PENDING})\n    apiService.getAuth()\n    .then((token: any) => fetch(uri, {\n      method: 'GET',\n      headers: {\n          Authorization: `${token.accessToken}`\n      },\n      redirect: 'follow', // manual, *follow, error\n    }))\n    .then((response: Response) => response.json())\n    .then((response: any) => dispatch({\n        type: SentimentActionKey.GET_SENTIMENT_SUCCESS,\n        payload: response\n    }))\n    .catch((err: Error) => dispatch({\n        type: SentimentActionKey.GET_SENTIMENT_ERROR,\n        payload: err\n    }))\n  }\n}\n\nexport {SentimentActionKey, SentimentAction}"]},"metadata":{},"sourceType":"module"}