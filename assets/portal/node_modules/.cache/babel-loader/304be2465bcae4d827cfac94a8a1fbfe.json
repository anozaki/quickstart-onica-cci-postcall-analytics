{"ast":null,"code":"import{ApiService}from\"../../service/api.service\";var apiService=new ApiService();var TranscriptsActionKey={GET_TRANSCRIPTS_PENDING:\"GET_TRANSCRIPTS_PENDING\",GET_TRANSCRIPTS_SUCCESS:\"GET_TRANSCRIPTS_SUCCESS\",GET_TRANSCRIPTS_ERROR:\"GET_TRANSCRIPTS_ERROR\"};var TranscriptsAction={getTranscripts:function getTranscripts(lastKey){return function(dispatch){var uri=\"\".concat(process.env.REACT_APP_BASE_API,\"/api/transcripts\");if(lastKey)uri=\"\".concat(uri,\"?lastKey=\").concat(encodeURIComponent(JSON.stringify(lastKey)));dispatch({type:TranscriptsActionKey.GET_TRANSCRIPTS_PENDING});apiService.getAuth().then(function(token){return fetch(uri,{method:'GET',headers:{Authorization:\"\".concat(token.accessToken)},redirect:'follow',// manual, *follow, error\nreferrerPolicy:'no-referrer'// no-referrer, *client\n});}).then(function(response){return response.json();}).then(function(response){return dispatch({type:TranscriptsActionKey.GET_TRANSCRIPTS_SUCCESS,payload:response});}).catch(function(err){return dispatch({type:TranscriptsActionKey.GET_TRANSCRIPTS_ERROR,payload:err});});};}};export{TranscriptsActionKey,TranscriptsAction};","map":{"version":3,"sources":["/Users/sshvans/Documents/work/quickstart/quickstart-onica-cci-postcall-analytics/assets/portal/src/store/actions/transcripts.actions.ts"],"names":["ApiService","apiService","TranscriptsActionKey","GET_TRANSCRIPTS_PENDING","GET_TRANSCRIPTS_SUCCESS","GET_TRANSCRIPTS_ERROR","TranscriptsAction","getTranscripts","lastKey","dispatch","uri","process","env","REACT_APP_BASE_API","encodeURIComponent","JSON","stringify","type","getAuth","then","token","fetch","method","headers","Authorization","accessToken","redirect","referrerPolicy","response","json","payload","catch","err"],"mappings":"AACA,OAAQA,UAAR,KAAyB,2BAAzB,CACA,GAAMC,CAAAA,UAAU,CAAG,GAAID,CAAAA,UAAJ,EAAnB,CAEA,GAAME,CAAAA,oBAAoB,CAAG,CACzBC,uBAAuB,CAAE,yBADA,CAEzBC,uBAAuB,CAAE,yBAFA,CAGzBC,qBAAqB,CAAE,uBAHE,CAA7B,CAMA,GAAMC,CAAAA,iBAAiB,CAAG,CACtBC,cAAc,CAAE,wBAACC,OAAD,QAAqB,UAACC,QAAD,CAAwB,CACzD,GAAIC,CAAAA,GAAG,WAAMC,OAAO,CAACC,GAAR,CAAYC,kBAAlB,oBAAP,CACA,GAAIL,OAAJ,CAAaE,GAAG,WAAMA,GAAN,qBAAqBI,kBAAkB,CAACC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAD,CAAvC,CAAH,CACbC,QAAQ,CAAC,CAACQ,IAAI,CAAEf,oBAAoB,CAACC,uBAA5B,CAAD,CAAR,CACAF,UAAU,CAACiB,OAAX,GACCC,IADD,CACM,SAACC,KAAD,QAAgBC,CAAAA,KAAK,CAACX,GAAD,CAAM,CAC7BY,MAAM,CAAE,KADqB,CAE7BC,OAAO,CAAE,CACLC,aAAa,WAAKJ,KAAK,CAACK,WAAX,CADR,CAFoB,CAK7BC,QAAQ,CAAE,QALmB,CAKT;AACpBC,cAAc,CAAE,aAAe;AANF,CAAN,CAArB,EADN,EASCR,IATD,CASM,SAACS,QAAD,QAAwBA,CAAAA,QAAQ,CAACC,IAAT,EAAxB,EATN,EAUCV,IAVD,CAUM,SAACS,QAAD,QAAmBnB,CAAAA,QAAQ,CAAC,CAC9BQ,IAAI,CAAEf,oBAAoB,CAACE,uBADG,CAE9B0B,OAAO,CAAEF,QAFqB,CAAD,CAA3B,EAVN,EAcCG,KAdD,CAcO,SAACC,GAAD,QAAgBvB,CAAAA,QAAQ,CAAC,CAC5BQ,IAAI,CAAEf,oBAAoB,CAACG,qBADC,CAE5ByB,OAAO,CAAEE,GAFmB,CAAD,CAAxB,EAdP,EAkBH,CAtBe,EADM,CAA1B,CA0BA,OAAQ9B,oBAAR,CAA8BI,iBAA9B","sourcesContent":["import {Dispatch} from \"redux\"\nimport {ApiService} from \"../../service/api.service\"\nconst apiService = new ApiService()\n\nconst TranscriptsActionKey = {\n    GET_TRANSCRIPTS_PENDING: \"GET_TRANSCRIPTS_PENDING\",\n    GET_TRANSCRIPTS_SUCCESS: \"GET_TRANSCRIPTS_SUCCESS\",\n    GET_TRANSCRIPTS_ERROR: \"GET_TRANSCRIPTS_ERROR\"\n}\n\nconst TranscriptsAction = {\n    getTranscripts: (lastKey: string) => (dispatch: Dispatch) => {\n        let uri = `${process.env.REACT_APP_BASE_API}/api/transcripts`\n        if (lastKey) uri = `${uri}?lastKey=${encodeURIComponent(JSON.stringify(lastKey))}`\n        dispatch({type: TranscriptsActionKey.GET_TRANSCRIPTS_PENDING})\n        apiService.getAuth()\n        .then((token: any) => fetch(uri, {\n            method: 'GET',\n            headers: {\n                Authorization: `${token.accessToken}`\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *client\n        }))\n        .then((response: Response) => response.json())\n        .then((response: any) => dispatch({\n            type: TranscriptsActionKey.GET_TRANSCRIPTS_SUCCESS,\n            payload: response\n        }))\n        .catch((err: Error) => dispatch({\n            type: TranscriptsActionKey.GET_TRANSCRIPTS_ERROR,\n            payload: err\n        }))\n    }\n}\n\nexport {TranscriptsActionKey, TranscriptsAction}"]},"metadata":{},"sourceType":"module"}