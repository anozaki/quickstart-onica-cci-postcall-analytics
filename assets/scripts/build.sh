#!/bin/bash

set -e

# Location of the portal
PORTAL="assets/portal"
BACKEND="functions/source"
PROJECT_DIR="../../"


COMMAND=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -s | --stage)
    STAGE="$2"
    shift # past argument
    shift # past value
    ;;
  -r | --region)
    REGION="$2"
    shift # past argument
    shift # past value
    ;;
  *) # unknown option
    COMMAND+=("$1") # save it in an array for later
    shift           # past argument
    ;;
  esac
done
set -- "${COMMAND[@]}" # restore positional parameters

echo "STAGE  = ${STAGE}"
echo "REGION = ${REGION}"


export DEPLOY_ENVIRONMENT=$STAGE
export REGION=$REGION
export CUSTOM_VOCABULARY_NAME="custom-vocabulary"

function build() {
  echo "Cleaning in progress"
  if [ -d "$DIST_DIR" ]; then
    echo "Deleting $DIST_DIR"
    rm -rf "$DIST_DIR"
  fi

  echo "Building in progress stage: $STAGE region: $REGION"


  # Execute the build process for the serverless project
  cd "$BACKEND" || exit
  eval "npm install"
  eval "npx serverless package --region $REGION --stage $STAGE"

  # Copy the generated lambda zip
  cp ".serverless/aws-icc.zip" "$PROJECT_DIR/functions/packages/aws-icc.zip"
  cp ".serverless/custom-resources.zip" "$PROJECT_DIR/functions/packages/custom-resources.zip"

  cd "$PROJECT_DIR"

  # Modifies the cloudformation template generated by the Serverless Framework
  cp "$BACKEND/.serverless/cloudformation-template-update-stack.json" "templates/aws-icc.template"
  eval "python assets/scripts/transform.py --template templates/aws-icc.template --save templates/aws-icc.template --zip functions/packages/aws-icc.zip" --custom "functions/packages/custom-resources.zip"


  # # Build the frontend portal
  cd "./$PORTAL" || exit
  eval "npm install"
  eval "npm run build:production"
  cd "$PROJECT_DIR"
  }

echo "Running Command: ${COMMAND[0]}"

case $COMMAND in
build) build $STAGE $REGION ;;
*) ;;
esac
