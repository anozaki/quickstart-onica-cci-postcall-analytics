import json
import argparse
from collections import OrderedDict


def transform_template(template, save_path, lambda_zip_key, lambda_jar_key, custom_zip_key):
    lambda_zip = "${QSS3KeyPrefix}" +  lambda_zip_key.replace("dist/", "")
    custom_zip = "${QSS3KeyPrefix}" + custom_zip_key.replace("dist/", "")
    with open(template) as json_file:
        data = json.load(json_file, object_pairs_hook=OrderedDict)
        resources = data.get("Resources")
        keys = set(resources.keys())
        for key in keys:
            if key.startswith("CreateSentimentsWidgetLambdaFunction"):
                s3key = resources[key]["Properties"]["Code"]["S3Key"]
                if s3key.endswith("zip"):
                    resources[key]["Properties"]["Code"]["S3Key"] = {
                       "Fn::Sub": lambda_zip
                    }
                elif s3key.endswith("jar"):
                    resources[key]["Properties"]["Code"]["S3Key"] = lambda_jar_key

            if key.endswith("LogGroup"):
                name = key.replace("LogGroup", "")
                lambda_logical_id = key.replace("LogGroup", "LambdaFunction")
                # Remove all the logGroups generated by the Serverless Framework
                del resources[key]
                resources[lambda_logical_id]["DependsOn"].remove(name + "LogGroup")

                # Replace all the lambda zip locations
                s3key = resources[lambda_logical_id]["Properties"]["Code"]["S3Key"]
                if s3key.endswith("zip"):
                    resources[lambda_logical_id]["Properties"]["Code"]["S3Key"] = {
                       "Fn::Sub": lambda_zip
                    }
                elif s3key.endswith("jar"):
                    resources[lambda_logical_id]["Properties"]["Code"]["S3Key"] = lambda_jar_key
            if key.endswith("Dashs3LambdaFunction"):
                # Replace all the lambda zip locations
                s3key = resources[key]["Properties"]["Code"]["S3Key"]
                if s3key.endswith("zip"):
                    resources[key]["Properties"]["Code"]["S3Key"] = {
                       "Fn::Sub": custom_zip
                    }

        del resources["ServerlessDeploymentBucketPolicy"]
        del resources["ServerlessDeploymentBucket"]

        data["Parameters"]["ServerlessDeploymentBucket"] = {
            "Type": "String",
            "Default": "",
            "Description": "The bucket to which the lambda zips are deployed to"
        }
        with open(save_path, 'w') as outfile:
            json.dump(data, outfile, indent=2, sort_keys=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--template', help='Path to Serverless Cloudformation Template')
    parser.add_argument('--save', help='Path to save')
    parser.add_argument('--zip', help='Zip Key Path')
    parser.add_argument('--custom', help='Custom resource zip path')
    parser.add_argument('--jar', help='Jar Key Path')
    args = parser.parse_args()

    transform_template(args.template, args.save, args.zip, args.jar, args.custom)
