AWSTemplateFormatVersion: 2010-09-09
Description: Call AnalyticsPortal Stack (qs-1r0eejdp0)
Parameters:
  QSS3BucketName:
    Default: ''
    Type: String
  QSS3KeyPrefix:
    Default: ""
    Type: String
  
Resources:
  DeploymentArtifactsBucket:
    Properties:
      Tags: []
    Type: AWS::S3::Bucket
  
  CopyObjects:
    DependsOn:
      - CleanUpS3Bucket
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CopyObjectsFunction.Arn
      SourceBucket: !Ref QSS3BucketName
      DestBucket: !Ref DeploymentArtifactsBucket
      SourcePrefixKey: !Sub '${QSS3KeyPrefix}'
      
  CopyObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Timeout: 240
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CopyObjectsRole
          - Arn
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          import uuid

          s3r = boto3.resource('s3')
          s3c = boto3.client('s3')

          def copy_objects(src_bucket, dest_bucket, prefix):
              files = s3c.list_objects(Bucket=src_bucket, Prefix=prefix)['Contents']
              for key in files:
                file_key = key['Key']
                s3r.meta.client.copy({'Bucket': src_bucket, 'Key': file_key}, dest_bucket, file_key)


          def delete_objects(bucket):
              paginator = s3c.get_paginator('list_object_versions')
              result = paginator.paginate(Bucket=bucket)
              objects = []
              for page in result:
                  try:
                      for k in page['Versions']:
                          objects.append({'Key': k['Key'], 'VersionId': k['VersionId']})
                      try:
                          for k in page['DeleteMarkers']:
                              version = k['VersionId']
                              key = k['Key']
                              objects.append({'Key': key, 'VersionId': version})
                      except:
                          pass
                      s3c.delete_objects(Bucket=bucket, Delete={'Objects': objects})
                  except:
                      pass


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              status = cfnresponse.SUCCESS
              try:
                  resource = event['ResourceProperties']
                  src_bucket = resource['SourceBucket']
                  dest_bucket = resource['DestBucket']
                  prefix = resource['SourcePrefixKey']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket)
                  else:
                      copy_objects(src_bucket, dest_bucket, prefix)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  CopyObjectsRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${QSS3BucketName}
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${QSS3BucketName}/*
                  - Fn::Sub: arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*
              - Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DeploymentArtifactsBucket}/*
                  - Fn::Sub: arn:aws:s3:::${DeploymentArtifactsBucket}
            Version: '2012-10-17'
          PolicyName: object-copier
    Type: AWS::IAM::Role
  CleanUpS3Bucket:
    Properties:
      DestBucket:
        Ref: DeploymentArtifactsBucket
      ServiceToken:
        Fn::GetAtt:
          - CleanUpS3BucketFunction
          - Arn
    Type: AWS::CloudFormation::CustomResource
  CleanUpS3BucketFunction:
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          s3c = boto3.client('s3')


          def delete_non_versioned_objects(bucket):
              print("Collecting data from" + bucket)
              paginator = s3c.get_paginator('list_objects_v2')
              result = paginator.paginate(Bucket=bucket)
              objects = []
              for page in result:
                  try:
                      for k in page['Contents']:
                          objects.append({'Key': k['Key']})
                          print("deleting objects")
                          s3c.delete_objects(Bucket=bucket, Delete={'Objects': objects})
                          objects = []
                  except Exception as e:
                      print(e)


          def delete_versioned_objects(bucket):
              print("Collecting data from" + bucket)
              paginator = s3c.get_paginator('list_object_versions')
              result = paginator.paginate(Bucket=bucket)
              objects = []
              for page in result:
                  try:
                      for k in page['Versions']:
                          objects.append({'Key': k['Key'], 'VersionId': k['VersionId']})
                      try:
                          for k in page['DeleteMarkers']:
                              version = k['VersionId']
                              key = k['Key']
                              objects.append({'Key': key, 'VersionId': version})
                      except Exception as e:
                          print(e)
                      print("deleting objects")
                      s3c.delete_objects(Bucket=bucket, Delete={'Objects': objects})
                  except Exception as e:
                      print(e)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  if event['RequestType'] == 'Delete':
                      check_if_versioned = s3c.get_bucket_versioning(Bucket=dest_bucket)
                      print(check_if_versioned)
                      if 'Status' in check_if_versioned:
                          print(check_if_versioned['Status'])
                          print("This is a versioned Bucket")
                          delete_versioned_objects(dest_bucket)
                      else:
                          print("This is not a versioned bucket")
                          delete_non_versioned_objects(dest_bucket)
                  else:
                      print("Nothing to do")
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

      Description: Empty the S3 Bucket
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - S3CleanUpRole
          - Arn
      Runtime: python2.7
      Timeout: 240
    Type: AWS::Lambda::Function
  S3CleanUpRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:s3:::${DeploymentArtifactsBucket}/*
                  - Fn::Sub: arn:aws:s3:::${DeploymentArtifactsBucket}
            Version: '2012-10-17'
          PolicyName: Empty-bucket
    Type: AWS::IAM::Role

Outputs:
  DeploymentArtifactS3BucketName:
    Value: !Ref DeploymentArtifactsBucket
  DeploymentArtifactS3KeyPrefix:
    Value: !Ref QSS3KeyPrefix