---
AWSTemplateFormatVersion: "2010-09-09"
Description: Creates Cleanup lambda resources (qs-1r0eejdr5)

Resources:
  CleanUpS3Buckets:
    DependsOn: # Force this to run before attempting to delete buckets
      - ComprehendCallResolutionBucket
      - ComprehendCallMotivationBucket
      - TranscriptionOutput
      - TranscriptionAudioFiles
      - SplitTranscriptOutput
      - TextAnalysisOutput
      - TextAnalysisAthena
      - PortalBucket
    Type: Custom::CleanUpS3Buckets
    Properties:
      ServiceToken: !GetAtt CleanUpS3BucketsFunction.Arn
      Buckets:
        - !Ref ComprehendCallResolutionBucket
        - !Ref ComprehendCallMotivationBucket
        - !Ref TranscriptionOutput
        - !Ref TranscriptionAudioFiles
        - !Ref SplitTranscriptOutput
        - !Ref TextAnalysisOutput
        - !Ref TextAnalysisAthena
        - !Ref PortalBucket
  CleanUpS3BucketsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          s3r = boto3.resource('s3')
          s3c = boto3.client('s3')

          def delete_objects(bucket):
              print("Collecting data from" + bucket)
              paginator = s3c.get_paginator('list_object_versions')
              result = paginator.paginate(Bucket=bucket)
              objects = []
              for page in result:
                  try:
                      for k in page['Versions']:
                          objects.append({'Key': k['Key'], 'VersionId': k['VersionId']})
                      try:
                          for k in page['DeleteMarkers']:
                              version = k['VersionId']
                              key = k['Key']
                              objects.append({'Key': key, 'VersionId': version})
                      except Exception as e:
                          print(e)
                          pass
                      print("deleting objects")
                      s3c.delete_objects(Bucket=bucket, Delete={'Objects': objects})
                  except Exception as e:
                      print(e)
                      pass
              print("bucket already empty")


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  buckets = event['ResourceProperties']['Buckets']
                  if event['RequestType'] == 'Delete':
                      for bucket in buckets:
                          delete_objects(bucket)
                  else:
                      print("Nothing to do")
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

      Description: Empty the S3 Bucket
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - S3CleanUpRole
          - Arn
      Runtime: python3.6
      Timeout: 240
  S3CleanUpRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Effect: Allow
                Resource:
                  - !GetAtt ComprehendCallResolutionBucket.Arn
                  - !GetAtt ComprehendCallMotivationBucket.Arn
                  - !GetAtt TranscriptionOutput.Arn
                  - !GetAtt TranscriptionAudioFiles.Arn
                  - !GetAtt SplitTranscriptOutput.Arn
                  - !GetAtt TextAnalysisOutput.Arn
                  - !GetAtt TextAnalysisAthena.Arn
                  - !GetAtt PortalBucket.Arn
            Version: '2012-10-17'
          PolicyName: Empty-bucket
  ComprehendCleanup:
    Type: Custom::ComprehendCleanup
    Properties:
      ServiceToken: !GetAtt ComprehendCleanupFunction.Arn
      MotivationEndpointArn:
        Fn::Join: 
          - ''
          - - 'arn:aws:comprehend:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':document-classifier-endpoint/'
            - Ref: CallMotivationClassifierName
            - 'Endpoint'
      ResolutionEndpointArn:
        Fn::Join: 
          - ''
          - - 'arn:aws:comprehend:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':document-classifier-endpoint/'
            - Ref: CallResolutionClassifierName
            - 'Endpoint'
      MotivationClassifierArn:
        Fn::Join:
          - ''
          - - 'arn:aws:comprehend:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':document-classifier/'
            - Ref: CallMotivationClassifierName
      ResolutionClassifierArn:
        Fn::Join: 
          - ''
          - - 'arn:aws:comprehend:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':document-classifier/'
            - Ref: CallResolutionClassifierName
  ComprehendCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Empty the S3 Bucket
      Handler: index.handler
      Role: !GetAtt ComprehendFullAccessRole.Arn
      Runtime: python3.6
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          comprehend = boto3.client('comprehend')

          def endpoint_exists(arn):
              try:
                  endpoint = comprehend.describe_endpoint(
                      EndpointArn=arn
                  )
                  return True
              except Exception as e:
                  return False


          def classifier_exists(arn):
              try:
                  endpoints = comprehend.describe_document_classifier(
                      Filter={
                          'ModelArn': arn
                      }
                  )
                  return True
              except Exception as e:
                  return False

          
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  mot_endpoint_arn = event['ResourceProperties']['MotivationEndpointArn']
                  res_endpoint_arn = event['ResourceProperties']['ResolutionEndpointArn']
                  mot_classifier_arn = event['ResourceProperties']['MotivationClassifierArn']
                  res_classifier_arn = event['ResourceProperties']['ResolutionClassifierArn']

                  if event['RequestType'] == 'Delete':
                      mot_endpoint_exists = endpoint_exists(mot_endpoint_arn)
                      res_endpoint_exists = endpoint_exists(res_endpoint_arn)
                      mot_classifier_exists = classifier_exists(mot_classifier_arn)
                      res_classifier_exists = classifier_exists(res_classifier_arn)
                      if mot_endpoint_exists is True:
                          print('deleting ' + mot_endpoint_arn)
                          comprehend.delete_endpoint(
                              EndpointArn=mot_endpoint_arn
                          )
                      if res_endpoint_exists is True:
                          print('deleting ' + res_endpoint_arn)
                          comprehend.delete_endpoint(
                              EndpointArn=res_endpoint_arn
                          )
                      if mot_classifier_exists is True:
                          print('deleting ' + mot_classifier_arn)
                          comprehend.delete_document_classifier(
                              DocumentClassifierArn=mot_classifier_arn
                          )
                      if res_classifier_exists is True:
                          print('deleting ' + res_classifier_arn)
                          comprehend.delete_document_classifier(
                              DocumentClassifierArn=res_classifier_arn
                          )
                  else:
                      print("Nothing to do")
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

