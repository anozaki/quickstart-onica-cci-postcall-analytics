"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RangeRequestFactory = void 0;
const range_request_tokenizer_1 = require("./range-request-tokenizer");
const initDebug = require("debug");
const debug = initDebug('range-request-reader');
class RangeRequestFactory {
    constructor(rangeRequestClient) {
        this.rangeRequestClient = rangeRequestClient;
        this.config = {
            avoidHeadRequests: false,
            initialChunkSize: 4 * 1024,
            minimumChunkSize: 1024
        };
    }
    async initTokenizer(config) {
        if (config) {
            this.config = Object.assign(Object.assign({}, this.config), config);
        }
        const headRequestInfo = await this.getHeadRequestInfo();
        return new range_request_tokenizer_1.RangeRequestTokenizer(this.rangeRequestClient, headRequestInfo, this.config.minimumChunkSize);
    }
    /**
     * Get file information, an HTTP-client may implement this doing a HEAD request
     * @return Promise with head-request-info, extending tokenizer file-info.
     */
    getHeadRequestInfo() {
        return this.config.avoidHeadRequests ?
            this.fetchFileInfoWithGetRequest() :
            this.fetchFileInfoWithHeadRequest();
    }
    async fetchFileInfoWithHeadRequest() {
        debug(`_fetchSizeWithHeadRequest()`);
        const info = await this.rangeRequestClient.getHeadInfo();
        if (info.size) {
            debug(`MIME-type=${info.mimeType}, content-length=${info.size}`);
            return info;
        }
        // Content-Length not provided by the server, fallback to
        // GET requests.
        debug('Content-Length not provided by the server, fallback to GET requests');
        return this.fetchFileInfoWithGetRequest();
    }
    async fetchFileInfoWithGetRequest() {
        const range = range_request_tokenizer_1.roundRange([0, this.config.initialChunkSize], this.config.minimumChunkSize);
        const response = await this.rangeRequestClient.getResponse('GET', range);
        debug(`_fetchSizeWithGetRequest response: contentRange=${response.contentRange}`);
        if (!response.contentRange) {
            throw new Error('Failed to resolve content range (file size)');
        }
        return response;
    }
}
exports.RangeRequestFactory = RangeRequestFactory;
//# sourceMappingURL=range-request-factory.js.map